install_from_swirl("Getting and Cleaning Data")
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dyplr)
packageVersion(dpylr)
packageVersion("dpylr")
library(dplyr)
packageVersion("dpylr")
play()
library(dplyr)
packageVersion("dpylr")
packageVersion("dplyr")
nxt()
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
?cran
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -x:size)
select(cran, x:size)
select(cran, -x)
select(cran, -('x':size)
)
cran
select(cran, x)
select(cran, date)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.o.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
?cran3
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
download.file(fileUrl, destfile='.\AmericanCommunitySurvey-2006.csv')
download.file(fileUrl, destfile='.\\AmericanCommunitySurvey-2006.csv')
dateDownloaded <- date()
dateDownloaded
survey <- read.csv('.\\AmericanCommunitySurvey-2006.csv')
dSurvey <- tbl_df(survey)
dSurvey
select(dSurvey, VAL == 24)
filter(dSurvey, VAL == 24)
millionsHouse <- filter(dSurvey, VAL == 24)
View(millionsHouse)
View(millionsHouse)
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'
libray(xlsx)
library(xlsx)
library("xlsx")
package("xlsx")
install.packages("xlsx")
library("xlsx")
download.file(fileUrl, destFile='.\\NGAP.xlsx')
download.file(fileUrl, destfile='.\\NGAP.xlsx')
download.file(fileUrl, destfile='.\\NGAP.xlsx')
NGAP <- read.xlsx2('.\\NGAP.xlsx')
NGAP <- read.xlsx2('.\\NGAP.xlsx',sheetIndex = 1)
download.file(fileUrl, destfile='.\\NGAP.xlsx',method="curl")
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'
download.file(fileUrl, destfile='.\\NGAP.xlsx',method="curl")
download.file(fileUrl, destfile='.\\NGAP2.xlsx')
NGAP <- read.xlsx2('NGAP2.xlsx',sheetIndex = 1)
?download.file
NGAP <- read.xlsx2('NGAP3.xlsx',sheetIndex = 1,mode='wb')
download.file(fileUrl, destfile='.\\NGAP2.xlsx', mode='wb')
NGAP <- read.xlsx2('NGAP2.xlsx',sheetIndex = 1,mode='wb')
NGAP
NGAP <- read.xlsx2('NGAP2.xlsx',sheetIndex = 1)
NGAP
dNGAP <- tbl_df(NGAP)
dNGAP
dNGAP[18:23,]
dNGAP[18:23,7:15]
NGAP <- read.xlsx2('NGAP2.xlsx',sheetIndex = 1,startRow = 18,endRow = 23)
dNGAP <- tbl_df(NGAP)
dNGAP
select(dNGAP, 7:15)
dat <- select(dNGAP, 7:15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?read.xlsx
View(dat)
View(dat)
NGAP <- read.xlsx2('NGAP2.xlsx',sheetIndex = 1,startRow = 18,endRow = 23, colClasses = c(rep("character",6), rep("numeric",4), "character", "numeric", rep("character", 3)) )
dNGAP <- tbl_df(NGAP)
dat <- select(dNGAP, 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
dNGAP
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
download.file(fileUrl, destfile='.\\rest.xml')
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse('rest.xml',useInternalNodes = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
xpathSApply(rootNode, '//zipcode = '21231')
xpathSApply(rootNode, '//zipcode', xmlValue)
zipcodes <- xpathSApply(rootNode, '//zipcode', xmlValue)
summary(zipcodes)
as.factor(zipcodes)
zcF <- as.factor(zipcodes)
summary(zcF)
?fread
library(data_table)
install.packages(data.table)
install.packages('data.table')
library(data.table)
DT <- fread('AmericanCommunitySurvey-2006.csv')
DT
View(DT)
View(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
rowMeans(DT)[DT$SEX==1]
summary(DT)
system.time({tapply(DT$pwgtp15,DT$SEX,mean)})
system.time({sapply(split(DT$pwgtp15,DT$SEX),mean)})
summary(DT$pwgtp15)
View(DT)
f2 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
DT <- fread(fileUrl)
DT <- fread(f2)
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time(rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT,na.rm = TRUE)[DT$SEX==1])
DT$SEX
as.factor(DT$SEX)
summary(as.factor(DT$SEX))
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX)
)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(paste(sapply(split(DT$pwgtp15,DT$SEX),mean))
)
mean(DT$pwgtp15,by=DT$SEX)
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
Rprof()
tapply(DT$pwgtp15,DT$SEX,mean)
Rprof(NULL)
summaryRprof()
Rprof()
sapply(split(DT$pwgtp15,DT$SEX),mean)
Rprof(NULL)
summaryRprof()
Rprof()
DT[,mean(pwgtp15),by=SEX]
Rprof(NULL)
summaryRprof()
Rprof()
mean(DT$pwgtp15,by=DT$SEX)
Rprof(NULL)
summaryRprof()
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth_app
?oauth2.0_token
myapp <- oauth_app("DataScienceQuiz",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
myapp <- oauth_app("DataScienceQuiz",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("DataScienceQuiz",
key = "f353a53320d036ca13a3",
secret = "3a3712d82a5d53e8d61e41da17971ff7412c1371")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?httr
install.packages("sqldf")
library(sqldf)
con <- url("hhttp://biostat.jhsph.edu/~jleek/contact.html")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
x <- readLines(con)
close(conn)
close(con)
head(x)
nchar(x[10, 20, 30, 100])
nchar(x[c(10, 20, 30, 100)])
x <- fread('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
library(data.table)
x <- fread('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
?fread
x <- fread('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', skip = 4, sep2='-', col.names = c('week','nino1', 'nino3', 'nino34', 'nino4'), data.table = TRUE)
x <- fread('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', skip = 4, sep2='-', col.names = c('week','nino1','nino1SSTA', 'nino3', 'nino3SSTA', 'nino34SSTA', 'nino4', 'nino4SSTA'), data.table = TRUE)
close(con)
?read.table
x<- read.table(url, stringsAsFactors = FALSE, sep=' ', skip=4,
col.names = c('week','nino1', 'nino3', 'nino34', 'nino4'))
con <- url('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
x<- read.table(con, stringsAsFactors = FALSE, sep=' ', skip=4,
col.names = c('week','nino1', 'nino3', 'nino34', 'nino4'))
x<- read.table(con, stringsAsFactors = FALSE, sep=' ', skip=4)
con <- url('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
x<- read.table(con, stringsAsFactors = FALSE, sep=' ', skip=4)
x< readLines(con)
x <- readLines(con)
con <- url('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
x <- readLines(con)
head(x)
y <- x[,4:]
y <- x[,4:nrow(x)]
nrow(x)
length(x)
y <- x[,4:length(x)]
y <- x[4:length(x)]
y <- x[5:length(x)]
str(y)
class(y)
lapply(y, function(l) {gsub(pattern="-",replacement=" ",l,fixed=TRUE)})
lapply(y, function(l) {gsub(pattern="-",replacement=" -",l,fixed=TRUE)})
z <-lapply(y, function(l) {gsub(pattern="-",replacement=" -",l,fixed=TRUE)})
read.table(z, col.names = c('week','nino1','nino1SSTA', 'nino3', 'nino3SSTA', 'nino34SSTA',
'nino4', 'nino4SSTA'), sep=' ')
writeLines(z, 'temp.txt')
?writeLines
str(z)
writeLines(as.character(z), 'temp.txt')
a <- read.table('temp.txt', stringsAsFactors = FALSE, sep=' ',
col.names = c('week','nino1','nino1SSTA', 'nino3', 'nino3SSTA', 'nino34SSTA',
'nino4', 'nino4SSTA'))
a <- read.table('temp.txt', stringsAsFactors = FALSE, sep=' ',
col.names = c('week','nino1','nino1SSTA', 'nino3', 'nino3SSTA', 'nino34', 'nino34SSTA','nino4', 'nino4SSTA'))
a <- read.table('temp.txt', stringsAsFactors = FALSE, sep=' ')
View(a)
View(a)
z1 <-lapply(z, function(l) {gsub(pattern="  ",replacement=" ",l,fixed=TRUE)})
z1
z1 <-lapply(z1, function(l) {gsub(pattern="  ",replacement=" ",l,fixed=TRUE)})
z1
z1 <-lapply(z1, function(l) {gsub(pattern="  ",replacement=" ",l,fixed=TRUE)})
z1
writeLines(as.character(z1), 'temp.txt')
a <- read.table('temp.txt', stringsAsFactors = FALSE, sep=' ')
a <- read.table('temp.txt', stringsAsFactors = FALSE, sep=' ',
col.names = c('blank', 'week','nino1','nino1SSTA', 'nino3', 'nino3SSTA', 'nino34SSTA',
'nino4', 'nino4SSTA'))
a <- read.table('temp.txt', stringsAsFactors = FALSE, sep=' ')
str(a)
sum(a[,5])
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
survey <- read.csv('.\\AmericanCommunitySurvey-2006.csv')
summary(survey)
agriculturalLogical <- survey[survey$ACR == 3 & survey$AGS == 6]
agriculturalLogical <- survey[survey$ACR == 3 & survey$AGS == 6,]
summary(agriculturalLogical)
survey$agriculturalLogical = survey$ACR == 3 & survey$AGS == 6
table(survey$agriculturalLogical)
which(survey$agriculturalLogical)
install.packages("jpeg")
library(jpeg)
?jpeg
pic <- jpeg("getdata%2Fjeff.jpg")
pic <- jpeg("jeff.jpg")
summary(pic)
pic <- jpeg("jeff2.jpg")
summary(pic)
pic <- jpeg("jeff3.jpg")
pic <- readJPEG("jeff3.jpg", native = TRUE)
jeff <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
img.n <- readJPEG(system.file("img", "jeff4.jpg", package="jpeg"), TRUE)
img.n <- readJPEG(system.file("img", "./jeff4.jpg", package="jpeg"), TRUE)
?system.file
?readJPEG
img <- readJPEG("jeff4.jpg", TRUE)
quantile(img,probs=c(0.3,0.8))
GDP <- read.csv("GDP.csv")
EDSTATS <- read.csv("EDSTATS_Country.csv")
summary(GDP)
summary(EDSTATS)
?merge
m <- merge(GDP, EDSTATS, by.x ="x", by.y = "CountryCode")
m <- merge(GDP, EDSTATS, by.x ="X", by.y = "CountryCode")
View(m)
View(m)
colnames(GDP)
colnames(EDSTATS)
m2 <- merge(GDP, EDSTATS, by.x ="X", by.y = "CountryCode", all.y = TRUE)
View(m2)
View(m2)
sort(m2$Gross.domestic.product.2012,decreasing = TRUE)
m2[order(m2$Gross.domestic.product.2012, decreasing = TRUE),]
m2[order(m2$Gross.domestic.product.2012, decreasing = TRUE),][,13]
m2[order(m2$Gross.domestic.product.2012, decreasing = TRUE),][13,]
m3 <- m2[order(m2$Gross.domestic.product.2012, decreasing = TRUE),]
View(m3)
View(m3)
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE)
View(GDP)
View(GDP)
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE, skip=4)
EDSTATS <- read.csv("EDSTATS_Country.csv", stringsAsFactors = FALSE)
View(EDSTATS)
View(EDSTATS)
summary(GDP)
GDP$rank = as.numeric(GDP$X.1)
View(GDP)
View(GDP)
m2 <- merge(GDP, EDSTATS, by.x ="X", by.y = "CountryCode", all.y = TRUE)
View(m2)
View(m2)
m3 <- m2[order(m2$Gross.domestic.product.2012, decreasing = TRUE),]
m3 <- m2[order(m2$rank, decreasing = TRUE),]
View(m3)
View(m3)
m3[13,]
library(dplyr)
byIncomeGroup <- group_by(m2,Income.Group)
summarize(byIncomeGroup, avgRank = ave('rank'))
summarize(byIncomeGroup, avgRank = ave('rank', na.rm = TRUE))
?ave
View(byIncomeGroup)
View(byIncomeGroup)
View(byIncomeGroup)
is.na(m2$Income.Group)
sum(is.na(m2$Income.Group))
sum(is.na(m2$rank))
m3 <- m2[which(m2$rank > 0), ]
sum(is.na(m3$rank))
byIncomeGroup <- group_by(m3,Income.Group)
summarize(byIncomeGroup, avgRank = ave('rank'))
summarize(byIncomeGroup, avgRank = ave(byIncomeGroup$rank))
summarize(byIncomeGroup, avgRank = ave(rank))
summarize(byIncomeGroup, avgRank = ave('rank))
_
)
'
)
summarize(byIncomeGroup, avgRank = ave('rank'))
View(m2)
View(m3)
View(m3)
m2$GDPRank = m2$rank
byIncomeGroup <- group_by(m2,Income.Group)
summarize(byIncomeGroup, avgRank = ave(GDPRank))
xtabs(ave(GDPRank) ~ Income.Group,data=m2)
xtabs(GDPRank ~ Income.Group,data=m2)
ddply(m2, .(Income.Group), summarise, ave(GDPRank))
library(ddply)
install.packages("ddply")
xtabs(GDPRank ~ Income.Group,aggregate(GDPRank ~ Income.Group,m2,ave))
xtabs(Income.Group ~ GDPRank,aggregate(GDPRank ~ Income.Group,m2,ave))
xtabs(Income.Group ~ GDPRank,aggregate(Income.Group ~ GDPRank,m2,ave))
summarize(byIncomeGroup, avgRank = mean(GDPRank))
summarize(byIncomeGroup, avgRank = mean(GDPRank, na.rm = TRUE))
quantile(m2$GDPRank,na.rm = TRUE)
quantile(m2$GDPRank,na.rm = TRUE,probs(0,0.2,0.4,0.6,0.8,1))
quantile(m2$GDPRank,na.rm = TRUE,probs=(0,0.2,0.4,0.6,0.8,1))
,
quantile(m2$GDPRank,na.rm = TRUE,probs=(0,0.2,0.4,0.6,0.8,1))
quantile(m2$GDPRank,na.rm = TRUE,probs=(0,0.2,0.4,0.6,0.8,1.0))
quantile(m2$GDPRank,na.rm = TRUE,probs=(0.2,0.4,0.6,0.8,1.0))
c(0.2,0.4,0.6,0.8,1.0)
?quantile
quantile(m2$GDPRank,probs=(0.2,0.4,0.6,0.8,1.0),na.rm = TRUE)
quantile(m2$GDPRank, probs=c(0.2,0.4,0.6,0.8,1.0), na.rm = TRUE)
m2$rank5Quantile = cut(m2$rank, breaks=quantile(m2$GDPRank, probs=c(0.2,0.4,0.6,0.8,1.0), na.rm = TRUE))
table(m2$rank5Quantile)
m2$rank5Quantile = cut(m2$GDPRank, breaks=quantile(m2$GDPRank, probs=c(0.2,0.4,0.6,0.8,1.0), na.rm = TRUE))
table(m2$rank5Quantile)
View(m2)
View(m2)
m2$rank5Quantile = cut2(m2$GDPRank,g5)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
m2$rank5Quantile = cut2(m2$GDPRank,g=5)
View(m2)
View(m2)
table(m2$rank5Quantile,m2$Income.Group)
survey <- read.csv('.\\AmericanCommunitySurvey-2006.csv')
names(survey)
strsplit(names(survey),'wgtp')
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE, skip=4)
View(GDP)
View(GDP)
GDP$GDP = as.numeric(gsub(",","",GDP$X.4))
mean(GDP$GDP, na.rm = TRUE)
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE)
GDP <- read.csv("GDP.csv", stringsAsFactors = FALSE, skip=4)
View(GDP)
View(GDP)
?gsub
GDP$GDP = as.numeric(gsub(",| ","",GDP$X.4))
View(GDP)
View(GDP)
mean(GDP$GDP, na.rm = TRUE)
library(dplyr)
countries <- filter(GDP, !is.na(GDP) & !is.na(X.1))
View(countries)
View(countries)
mean(countries$GDP)
countries <- filter(GDP, !is.na(GDP) & is.numeric(X.1))
countries <- filter(GDP, !is.na(GDP) & X.1 != '')
mean(countries$GDP)
countryNames <- countries$X.3
grep("^United",countryNames), 3
grep("^United",countryNames)
grep("^United",countryNames, value = TRUE)
EDSTATS <- read.csv("EDSTATS_Country.csv", stringsAsFactors = FALSE)
View(EDSTATS)
View(EDSTATS)
m2 <- merge(GDP, EDSTATS, by.x ="X", by.y = "CountryCode", all.y = TRUE)
View(m2)
View(m2)
names(m2)
countriesWithNotes <- filter(m2, Special.Notes != '')
View(countriesWithNotes)
View(countriesWithNotes)
grep("Fiscal year end\: June", m2$Special.Notes, value=TRUE)
grep("Fiscal year end: June", m2$Special.Notes, value=TRUE)
install.packages("quantmod")
library(quantmod)
mzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleDates = ymd(sampleTimes)
library(lubridate)
sampleDates = ymd(sampleTimes)
y(sampleTimes) == 2012
year(sampleTimes) == 2012
samplesTimes[year(sampleTimes) == 2012]
sampleTimes[year(sampleTimes) == 2012]
length(sampleTimes[year(sampleTimes) == 2012])
length(sampleTimes[year(sampleTimes) == 2012 & day(sampleTimes) == 2])
?day
length(sampleTimes[year(sampleTimes) == 2012 & wday(sampleTimes) == 2])
